// a simple GUI system to auto layout text, images, borders and clickable buttons etc on top of a game
// no documentation yet, check out the test case at the end

include "vec.lobster"
include "color.lobster"

/*
TODO:

- need a select one of many mode (see totslike)
- need a "stretch" mode that automatically uses the maximum space inside the res

- other widgets... multiple select etc
- automatically scroll if doesn't fit in windowsize?

*/

private cursize := nil

private parent_size := nil

private vertical := true

private render_pass := false
private size_list := []
private size_index := 0

private align := nil
private spacing := 0

private hover_color := color_dark_grey
private select_color := color_grey

private overalsize := nil

private interactive := true

private actionsound := nil

private value guielem: [ id, size ]

private function cache_size(id, f):
    if(render_pass):
        i := size_index
        while(i < size_list.length):    // usually this lookup will hit the if on the first iteration, but if not, any skipped elements are old elements just removed by an event handler
            e := size_list[i++]
            if(e.id == id):
                size_index = i
                return e.size
        nil   // new element inserted by event handler, do not render yet
    else:
        i := size_list.length()
        size_list.push(nil) // push first, just in case f() pushes elements also (keep pre-order)
        size := f()
        size_list[i] = [ id, size ]:guielem
        size
        

private function advance(v, f):
    //allint(v)
    if(render_pass):
        f()
    else:
        cursize =
            if(vertical): [ max(cursize.x, v.x), cursize.y + v.y + (cursize.y & spacing) ]:xy
            else:         [ cursize.x + v.x + (cursize.x & spacing), max(cursize.y, v.y) ]:xy

private function max_space(v):
    if(vertical): [ parent_size.x, v.y ]:xy else: [ v.x, parent_size.y ]:xy
            
private function position(v, f):
    //allint(v)
    r := max_space(v) - v
    gl_translate(if(align == 1): round(r / 2) else: align / 2 * r, f)

private function cursize_of(id, f):
    cache_size(id):
        cursize <- vec_0i
        f()
        cursize
    
private function element(size, f):
    if(size):   // will be nil if we're in the render pass and element was just deleted
        advance(size):
            position(size, f)
            if(vertical):
                gl_translate(vec_y * (size.y + spacing))
            else:
                gl_translate(vec_x * (size.x + spacing))

private function block(al, sp, vert, id, f):
    spi := round(sp * gl_getfontsize())
    size := cursize_of(id):
        spacing <- spi
        vertical <- vert
        f()
    element(size):
        vertical <- vert
        align <- al
        spacing <- spi
        parent_size <- size
        f()

function gui_text(text):
    element(cache_size(caller_id()): gl_textsize(text)):
        //print(gl_textsize(text))
        gl_text(text)
        
function gui_image(factors, tex):
    size := round(factors * gl_getfontsize())
    element(size):
        gl_setshader("textured")
        gl_setprimitivetexture(0, tex)
        gl_rect(size)
        gl_setshader("color")
        
function gui_divider(thickness):
    align <- 0
    element(round(vec_1i * thickness)):
        gl_rect(if(vertical): [ parent_size.x, thickness ] else: [ thickness, parent_size.y ])

function gui_space(thickness):
    element(vec_1i * round(thickness * gl_getfontsize())): nil

function gui_start(size, alignh, alignv, interact, f):   // top level only
    id := caller_id()
    gl_setshader("color")
    gl_blend(1):
        parent_size <- size
        vertical <- false
        interactive <- interact
        
        render_pass = false
        size_list = []

        overalsize = cursize_of(id, f)
        assert(overalsize)
        
        //print(size_list)

        render_pass = true
        size_index = 1

        align <- alignv
        position(overalsize):
            align <- alignh
            vertical <- true
            f()
            
        //assert(size_index == length(size_list))
        //print(size_index)
        
function gui_hblock(al, sp, f): block(al, sp, false, caller_id(), f)
function gui_vblock(al, sp, f): block(al, sp, true,  caller_id(), f)
        
function gui_fontscale(factor, f):
    os := gl_getfontsize()
    gl_setfontsize(round(os * factor))
    f()
    gl_setfontsize(os)
 
function gui_color(col, f): nest_if(render_pass, function(): gl_color(col, _), f)
function gui_blend(bli, f): nest_if(render_pass, function(): gl_blend(bli, _), f)

private function around(m, draw, id, f):
    size := cursize_of(id, f)
    if(size):
        size += round(m * 2)
        advance(size):
            if(draw):
                position(size): // FIXME: clean this up
                    gl_rect([ size.x, m.y ])    
                    gl_rect([ m.x, size.y ])
                    gl_translate([ size.x - m.x, 0]):
                        gl_rect([ m.x, size.y ])
                    gl_translate([ 0, size.y - m.y]):
                        gl_rect([ size.x, m.y ])
            function forward(): gl_translate([ vec_xi, vec_yi ][vertical] * m[vertical])
            forward()
            f()
            forward()

function gui_margin(m, f): around(m, false, caller_id(), f)
function gui_border(m, f): around(m, true,  caller_id(), f)
        
private function overlay(stretch, id, f, g):
    size := cursize_of(id, f)
    if(size):
        advance(size):
            if(stretch):
                g(max_space(size))
            else:
                position(size):
                    g(size)
            f() 
        
function gui_background(col, stretch, f):
    overlay(stretch, caller_id(), f) size:
        gl_color(col):
            gl_rect(size)
            gl_hit(size, 0)    // stop clicks from reaching whatevers beneath this

private function button(id, f, do):
    overlay(false, id, f) size:
        if(gl_hit(size, 0) & interactive):
            gl_color(if(gl_isdown("mouse1")): select_color else: hover_color):
                gl_rect(size)
            if(gl_wentdown("mouse1")):
                if(actionsound): play_sfxr(actionsound) // FIXME: wavs too
                do()

function gui_button(f, do):         button(caller_id(), f, do)
function gui_button_text(text, do): button(caller_id(), function(): gui_text(text), do)

function gui_slider(val,mini,maxi,f): slider(val,mini,maxi,f,false)
function gui_intslider(val,mini,maxi,f): slider(val,mini,maxi,f,true)

function slider(val,mini,maxi,f,do_floor):
    gui_hblock(1,0):
        if(render_pass):
            if(maxi>mini):
                gl_blend(1):
                    gl_color([1,0,0,0.5]):
                        if(do_floor):
                            val=floor(val)
                        t:=(val*1.0-mini)/(maxi-mini)
                        t=max(t,0)
                        t=min(t,1)
                        //print(parent_size)
                        gl_rect([t*parent_size[0],parent_size[1]])

                hitpos:=gl_hitpos(parent_size,0)
                //print("hit, "+hitpos)
                if(hitpos&interactive):
                    if(gl_isdown("mouse1")):
                        tmp:=mini+hitpos[0]*(maxi-mini)
                        if(do_floor):
                            val=floor(tmp)
                        else:
                            val=tmp
        f()
        gui_text(" ("+val+")")

    val
    

function gui_custombackground(f): if(render_pass): f(overalsize)
              
function gui_setclickcolors(hover, sel):
    hover_color = hover
    select_color = sel
    
function gui_setactionsound(snd):
    actionsound = snd
     
if(program_name() == "gui.lobster"): // run example

    fatal(gl_window("gui test", 960, 640))
    check(gl_setfontname("data/fonts/US101/US101.ttf"), "can\'t load font!")
    //check(gl_setfontname("C:\\Windows\\Fonts\\arialuni.ttf"), "can\'t load font!")
            
    ghosttex := gl_loadtexture("data/textures/lobster.jpg")
    
    clicked := false
     
    while(gl_frame()):
        if(gl_wentdown("escape")):
            return
        
        gl_setfontsize(gl_windowsize()[1] / 10)
        //gl_setmaxfontsize(512)

        gl_clear(color_black)
        gl_color(color_white)

        gui_setclickcolors(color_dark_green, color_green)
        
        gui_start(gl_windowsize(), 1, 1, true):
            gui_hblock(1, 0):
                //gui_fontscale(0.3):
                 //   gui_text(unicode2string(map(500): _))
		
                gui_text("A")
                gui_fontscale(5):
                    gui_text("B")
                gui_vblock(2, 0):
                    gui_text("1")
                    gui_hblock(1, 0.1):
                        gui_text("2")
                        gui_text("2")
                        gui_text("2")
                    gui_divider(2)
                    gui_text("3")
                    gui_text("4")
                gui_space(0.2)
                gui_divider(4)
                gui_space(0.2)
                gui_text("C")
                gui_button():
                    gui_border(vec_1 * 2):
                        gui_fontscale(2):
                            gui_text("clickme")
                do:
                    clicked = !clicked
                if(clicked):
                    gui_color(color_red):       
                        //gui_text(unicode2string([0x30E6, 0x30FC, 0x30B6, 0x30FC, 0x5225, 0x30B5, 0x30A4, 0x30C8]))
                        gui_text("ON")
                gui_text("C")
                gui_background(color_blue, false):
                    gui_margin([ 4, 4 ]:xy):
                        gui_text("D")
                        if(clicked):
                            gui_blend(2):    
                                gui_image(vec_1, ghosttex)
                gui_text("E")
                gui_text("E")

